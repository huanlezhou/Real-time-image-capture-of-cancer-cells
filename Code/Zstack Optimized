package plugins.tkkoba1997.zstack_optimization;
import icy.plugin.abstract_.PluginActionable;
import plugins.tprovoost.Microscopy.MicroManager.MicroManager;
import plugins.tprovoost.Microscopy.MicroManager.tools.StageMover;
import java.util.concurrent.TimeUnit;
import java.io.File;
import icy.file.Saver;
import icy.image.IcyBufferedImageUtil;
import icy.sequence.Sequence;
import icy.type.collection.array.Array1DUtil;
import java.lang.String;
import icy.image.IcyBufferedImage;

public class ZStack_Optimization extends PluginActionable {
		public void getZStack(File filePath, double zoom_range, double z_increment, 
							  double[] zcorrections, int[] expsr_corrections) { 

		double initial_z_position = 0.0;
		try { initial_z_position = StageMover.getZ(); } catch (Exception e1) { e1.printStackTrace(); }
		
		int delay_interval = 100;	//Delay to make certain hardware (HW) keeps up with software (SW). 
		int zoom_degree = -1;		// An integer loop variable which MUST be set to -1 before entering the z-stack acquisition loops.
		
		Sequence sequence0 =  new Sequence();

		// Get the current reflector turret (channel) state. 
		String channel_state_str = "0";
		try { channel_state_str = MicroManager.getCore().getProperty("ZeissReflectorTurret", "State"); } catch (Exception e) { e.printStackTrace(); }
		
		char[] channel_state_array = channel_state_str.toCharArray();
		char channel_state_char = channel_state_array[0];
		int channel_state = 0;
		
		if ((channel_state_char=='0')&&(channel_state_array.length < 2)) { channel_state = 0;}
		else if ((channel_state_char=='1')||((channel_state_char=='0')&&(channel_state_array.length>=2))) { channel_state = 1;}
		else if (channel_state_char=='2') { channel_state = 2;}
		else if (channel_state_char=='3') { channel_state = 3;}
		else if (channel_state_char=='4') { channel_state = 4;}
		else if (channel_state_char=='5') { channel_state = 5;}
			
		try { TimeUnit.MILLISECONDS.sleep(delay_interval); } catch (InterruptedException e) { e.printStackTrace(); }

		// If the channel state is not in the cancer detecting channel position, change it to it.
		if (channel_state != 0){
			try { MicroManager.getCore().setProperty("ZeissReflectorTurret", "State", 0); } catch (Exception e) { e.printStackTrace(); }
			channel_state = 0; }
		
		try { TimeUnit.MILLISECONDS.sleep(delay_interval); } catch (InterruptedException e) { e.printStackTrace(); }
		try { StageMover.moveZAbsolute(initial_z_position-zoom_range); } catch (Exception e) { e.printStackTrace(); }

		IcyBufferedImage image = null;
		try { image = MicroManager.snapImage(); } catch (Exception e) { e.printStackTrace(); }
		
		// Need six images to constantly append new images to. 
		// Initialize to a snapped image so XY dimensions are all equal.
		IcyBufferedImage image0 = image;
		IcyBufferedImage image1 = image;
		IcyBufferedImage image2 = image;
		IcyBufferedImage image3 = image;
		IcyBufferedImage image4 = image;
		IcyBufferedImage image5 = image;
		
		// Create an array out of the image data.
		Object dataArray = image.getDataCopyXY(0);
		// Convert and store it to a double type array, making note if the original was signed data type.
		double[] doubleDataArray = Array1DUtil.arrayToDoubleArray(dataArray, image.isSignedDataType());
		
		// Some initialization/defaults
		double z_correction = 0.0;
		int camera_exposure = 500;
		try { MicroManager.setExposure((double)camera_exposure); } catch (Exception e2) { e2.printStackTrace(); }
		
		/////////////////////////////Z-stack image acquisition loops begin ////////////////////////////////////////
		// The for-loop cycles through all the z-positions for the z-stack.
			for (double current_zoom = 0.0; current_zoom <= (zoom_range * 2 + 0.001); current_zoom += z_increment){
			zoom_degree += 1;
			
			// The do-while loop (you see the "do" below) cycles through all the channels.
			// Thus channels are cycles through or each z-slice, and then the stage is moved to the next z-position. 
			do {				
				// Need to correct z_positions to reflect different focuses of different channels. Same with camera exposure times.
				z_correction = zcorrections[channel_state];
				camera_exposure = expsr_corrections[channel_state];
				
				double current_z = 0.0;
				try { current_z = StageMover.getZ(); } catch (Exception e1) { e1.printStackTrace(); }
				try { StageMover.moveZAbsolute(current_z+z_correction); } catch (Exception e1) { e1.printStackTrace(); }
				//println("Channel State: "+channel_state+"    Zoom = "+current_zoom+"    Zoom degree:"+zoom_degree+"    Corrected Z-position:   "+(current_z+z_correction)+"\n");
				
				// Snap the image and wait for the HW to get the job done.
				try { image = MicroManager.snapImage(); } catch (Exception e1) { e1.printStackTrace(); }
				try { TimeUnit.MILLISECONDS.sleep(delay_interval); } catch (InterruptedException e1) { e1.printStackTrace(); }

				// Code for saving/manipulating images begins here
				// Create a single frame image the first time a z-slice is taken under each channel.
				if ((zoom_degree==0)&&(channel_state==0))      { image0 = image; }
				else if ((zoom_degree==0)&&(channel_state==1)) { image1 = image; }
				else if ((zoom_degree==0)&&(channel_state==2)) { image2 = image; }
				else if ((zoom_degree==0)&&(channel_state==3)) { image3 = image; }
				else if ((zoom_degree==0)&&(channel_state==4)) { image4 = image; }
				else if ((zoom_degree==0)&&(channel_state==5)) { image5 = image; }
				
				// If first z-slice has already been acquired, then the following else-if branches are taken (lines 113-154).
				// Add blank frame to image and return the result named as image<particular_channel> (reassignment occurs).
				// Begin an update on image<particular_channel> to avoid manual, slow manual replacements with for loops.
				// Create an array (matrix) with a copy of the pixel data of the <image> snapped on line 92.
				// Convert that data to type double (floating point) values.
				// Convert the doubleDataArray to the original data type of <image> and store in corresponding image<particular_channel>
				// End update on image<particular_channel>. Recalculation & refresh performed once, as opposed to manual for loop modification of individual pixels. 
				else if ((!(zoom_degree==0))&&(channel_state==0)){
					image0 = IcyBufferedImageUtil.addChannel(image0);
					image0.beginUpdate();
					dataArray = image.getDataCopyXY(0);
					doubleDataArray = Array1DUtil.arrayToDoubleArray(dataArray, image.isSignedDataType());
					Array1DUtil.doubleArrayToSafeArray(doubleDataArray, image0.getDataXY(zoom_degree), image0.isSignedDataType());
					image0.endUpdate(); }
				else if ((!(zoom_degree==0))&&(channel_state==1)){
					image1 = IcyBufferedImageUtil.addChannel(image1);
					image1.beginUpdate();
					dataArray = image.getDataCopyXY(0);
					doubleDataArray = Array1DUtil.arrayToDoubleArray(dataArray, image.isSignedDataType());
					Array1DUtil.doubleArrayToSafeArray(doubleDataArray, image1.getDataXY(zoom_degree), image1.isSignedDataType());
					image1.endUpdate(); }
				else if ((!(zoom_degree==0))&&(channel_state==2)){
					image2 = IcyBufferedImageUtil.addChannel(image2);
					image2.beginUpdate();
					dataArray = image.getDataCopyXY(0);
					doubleDataArray = Array1DUtil.arrayToDoubleArray(dataArray, image.isSignedDataType());
					Array1DUtil.doubleArrayToSafeArray(doubleDataArray, image2.getDataXY(zoom_degree), image2.isSignedDataType());
					image2.endUpdate(); }
				else if ((!(zoom_degree==0))&&(channel_state==3)){
					image3 = IcyBufferedImageUtil.addChannel(image3);
					image3.beginUpdate();
					dataArray = image.getDataCopyXY(0);
					doubleDataArray = Array1DUtil.arrayToDoubleArray(dataArray, image.isSignedDataType());
					Array1DUtil.doubleArrayToSafeArray(doubleDataArray, image3.getDataXY(zoom_degree), image3.isSignedDataType());
					image3.endUpdate(); }
				else if ((!(zoom_degree==0))&&(channel_state==4)){
					image4 = IcyBufferedImageUtil.addChannel(image4);
					image4.beginUpdate();
					dataArray = image.getDataCopyXY(0);
					doubleDataArray = Array1DUtil.arrayToDoubleArray(dataArray, image.isSignedDataType());
					Array1DUtil.doubleArrayToSafeArray(doubleDataArray, image4.getDataXY(zoom_degree), image4.isSignedDataType());
					image4.endUpdate(); }
				else if ((!(zoom_degree==0))&&(channel_state==5)){
					image5 = IcyBufferedImageUtil.addChannel(image5);
					image5.beginUpdate();
					dataArray = image.getDataCopyXY(0);
					doubleDataArray = Array1DUtil.arrayToDoubleArray(dataArray, image.isSignedDataType());
					Array1DUtil.doubleArrayToSafeArray(doubleDataArray, image5.getDataXY(zoom_degree), image5.isSignedDataType());
					image5.endUpdate(); }
				
			// If an invalid state is detected, replace with 0. (Redundancy for errors).
			if (channel_state < 0 || channel_state > 5) { channel_state = 0; }
			
			// If the channel_state is not in the greatest valued position (5), increment it.
			if (channel_state < 5) {
				channel_state = channel_state + 1; // Do NOT replace with "channel_state += 1". Has caused errors.
				try { MicroManager.getCore().setProperty("ZeissReflectorTurret", "State", channel_state); } catch (Exception e) { e.printStackTrace(); }
				try { TimeUnit.MILLISECONDS.sleep(delay_interval); } catch (InterruptedException e) { e.printStackTrace(); }
			}
			// If the channel_state is NOT less than 5, because it is 5, set it to 0.
			else {
				channel_state = 0;
				try { MicroManager.getCore().setProperty("ZeissReflectorTurret", "State", channel_state); } catch (Exception e) { e.printStackTrace(); }
				try { TimeUnit.MILLISECONDS.sleep(delay_interval); } catch (InterruptedException e) { e.printStackTrace(); } 
			} 
			
			try { StageMover.moveZAbsolute(current_z); } catch (Exception e) { e.printStackTrace(); }
			
			} while (channel_state != 0);
				
			double current_z = 0.0;	
			try { current_z = StageMover.getZ(); } catch (Exception e1) { e1.printStackTrace(); }
			try { StageMover.moveZAbsolute(current_z + z_increment); } catch (Exception e) { e.printStackTrace(); }
		}  ////////////////////End Z-stack Acquisition Loops/////////////////////////////////////////////
		
		// Restore stage to initial_z_position.
		try { StageMover.moveZAbsolute(initial_z_position); } catch (Exception e1) { e1.printStackTrace(); }
		
		// Store the image<particular_channel> files (each hold multiple z-slices) in the sequence. 
		sequence0.setImage(0, 0, image0);
		sequence0.setImage(0, 1, image1);
		sequence0.setImage(0, 2, image2);
		sequence0.setImage(0, 3, image3);
		sequence0.setImage(0, 4, image4);
		sequence0.setImage(0, 5, image5);

		double x_position = 0.0;
		double y_position = 0.0;
		try { x_position = StageMover.getX(); } catch (Exception e) { e.printStackTrace(); }
		try { y_position = StageMover.getY(); } catch (Exception e) { e.printStackTrace(); }
		
		// Write out the sequence containing the z-stacks in the user specified directory.
		//Check the correction of adding "File " before "file = new..."
		File file = new File(filePath + "x"+ x_position + "y" + y_position+".tiff");
		Saver.save(sequence0, file);
		}

	@Override
	public void run() {
		// TODO Auto-generated by Icy4Eclipse
		String filePath = "C:/Documents and Settings/asi/Desktop/Team4_Capstone/ZTestInJava/";
		File myTestFile = new File(filePath);
		ZStack_Optimization MyTest = new ZStack_Optimization();
		double[] ZCORRECTIONS = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
		int[] EXPOSURES = {50, 100, 200, 60, 100, 100};
		MyTest.getZStack(myTestFile, 3.0, 3.0, ZCORRECTIONS, EXPOSURES); }
}
