//This is a study version.
//Copy and paste into Eclipse to view color coded code instead of all black here! 

private void getZStack(File filePath, double zoom_range, double z_increment, 
			double zcorrect0, double zcorrect1, double zcorrect2, double zcorrect3,
			double zcorrect4, double zcorrect5) { 
		
		//Old stuff I needed to import when I developed this function in Icy script
		//importClass(Packages.icy.type.collection.array.Array1DUtil)
		//importClass(Packages.icy.image.IcyBufferedImageUtil)
		//importClass(Packages.icy.sequence.Sequence)
		//importClass(Packages.plugins.tprovoost.Microscopy.MicroManager.MicroManager)
		//importClass(Packages.plugins.tprovoost.Microscopy.MicroManager.tools.StageMover)
		//importClass(Packages.icy.file.Saver)
		//importClass(Packages.java.io.File)
		//importClass(Packages.java.util.concurrent.TimeUnit)


		double initial_z_position = 0.0;
		initial_z_position = StageMover.getZ();
		int delay_interval = 100;	//Makes certain hardware (HW) keeps up with software (SW) which runs must faster. By default SW does not wait for HW changes. 
		int zoom_degree = -1;	// An integer loop variable which needs be set to -1 before entering the z-stack acquisition loops.
								// It must be an integer because it is used as an index.
		Sequence sequence0 =  new Sequence();

		// Get the current reflector turret (channel) state. 
		String channel_state_str = "0";
		channel_state_str = MicroManager.getCore().getProperty("ZeissReflectorTurret", "State");
		char[] channel_state_array = channel_state_str.toCharArray();
		char channel_state_char = channel_state_array[0];
		int channel_state = 0;
		
		if ((channel_state_char=='0')&&(channel_state_array.length < 2)) {
			channel_state = 0;}
		else if ((channel_state_char=='1')||((channel_state_char=='0')&&(channel_state_array.length==2))) {
			channel_state = 1;}
		else if (channel_state_char=='2') {
			channel_state = 2;}
		else if (channel_state_char=='3') {
			channel_state = 3;}
		else if (channel_state_char=='4') {
			channel_state = 4;}
		else if (channel_state_char=='5') {
			channel_state = 5;}
			
			TimeUnit.MILLISECONDS.sleep(delay_interval);

		// If the channel state is not in the cancer detecting channel position, change it to it.
		if (channel_state != 0){
			MicroManager.getCore().setProperty("ZeissReflectorTurret", "State", 0);
			channel_state = 0; }
			TimeUnit.MILLISECONDS.sleep(delay_interval);
			StageMover.moveZAbsolute(initial_z_position-zoom_range);

		IcyBufferedImage image = null;
		image = MicroManager.snapImage();
		IcyBufferedImage image0 = image;
		IcyBufferedImage image1 = image;
		IcyBufferedImage image2 = image;
		IcyBufferedImage image3 = image;
		IcyBufferedImage image4 = image;
		IcyBufferedImage image5 = image;
		Object dataArray = image.getDataCopyXY(0);
		double[] doubleDataArray = Array1DUtil.arrayToDoubleArray(dataArray, image.isSignedDataType());
		double z_correction = 0.0;


		/////////////////////////////Z-stack image acquisition loops////////////////////////////////////////
		// The for-loop cycles through all the z-positions for the z-stack.
			for (double current_zoom = 0.0; current_zoom <= (zoom_range * 2 + 0.001); current_zoom += z_increment){
			zoom_degree += 1;
			
			// The do-while loop (you see the "do" below) cycles through all the channels.
			// Thus channels are cycles through or each z-slice, and then the stage is moved to the next z-position. 
			do {
								
				// Need to correct z_positions to reflect different focuses of different channels.
				if (channel_state==0){
					z_correction = zcorrect0;} //Should be variable input to the function however. CHANGE LATER!
				else if (channel_state==1){
					z_correction = zcorrect1;}
				else if (channel_state==2){
					z_correction = zcorrect2;}
				else if (channel_state==3){
					z_correction = zcorrect3;}
				else if (channel_state==4){
					z_correction = zcorrect4;}
				else if (channel_state==5){
					z_correction = zcorrect5;}
				
				double current_z = 0.0;
				current_z = StageMover.getZ();
				StageMover.moveZAbsolute(current_z+z_correction);
				
				//Print statements for debugging purposes.
				//println("Channel State: "+channel_state+"    Zoom = "+current_zoom+"    Zoom degree:"+zoom_degree+"    Corrected Z-position:   "+(current_z+z_correction)+"\n");
				
				// Snap the image and wait for the HW to get the job done.
					image = MicroManager.snapImage();
					TimeUnit.MILLISECONDS.sleep(delay_interval);

				// Code for saving/manipulating images begins here
				if ((zoom_degree==0)&&(channel_state==0)){
				// Create a single image the first time a z-slice is taken under channel 0
				//IcyBufferedImage image0 = image;
				image0 = image;}
				else if ((zoom_degree==0)&&(channel_state==1)){
				// Create a single image the first time a z-slice is taken under channel 1
				//IcyBufferedImage image1 = image;
				image1 = image;}
				else if ((zoom_degree==0)&&(channel_state==2)){
				// Create a single image the first time a z-slice is taken under channel 2
				//IcyBufferedImage image2 = image;
				image2 = image;}
				else if ((zoom_degree==0)&&(channel_state==3)){
				//IcyBufferedImage image3 = image;
				image3 = image;}
				else if ((zoom_degree==0)&&(channel_state==4)){
				//IcyBufferedImage image4 = image;
				image4 = image;}
				else if ((zoom_degree==0)&&(channel_state==5)){
				//IcyBufferedImage image5 = image;
				image5 = image;}
				
				// If the zoom_degree doesn't equal 0, that is, the first z-slice has already been acquired, then these else-if branches
				// are taken.
				else if ((!(zoom_degree==0))&&(channel_state==0)){
					// Add a blank channel image to image0 and return the result named as image0 
					image0 = IcyBufferedImageUtil.addChannel(image0);
					// Begin an update on image0, is used to avoid image refresh & recalculations which slow down program execution
					image0.beginUpdate();
					// Create an array (matrix) with a copy of the pixel data of the image snapped on line 49
					dataArray = image.getDataCopyXY(0);
					// Convert that data to type double (floating point) values.
					doubleDataArray = Array1DUtil.arrayToDoubleArray(dataArray, image.isSignedDataType());
					// Convert the doubleDataArray to the data type format of the original image and store the result in the corresponding channel
					// frame of image0.
					Array1DUtil.doubleArrayToSafeArray(doubleDataArray, image0.getDataXY(zoom_degree), image0.isSignedDataType());
					// End the update on image0. Causes recalculations and refresh events a single time.
					image0.endUpdate();
					}
				else if ((!(zoom_degree==0))&&(channel_state==1)){
					image1 = IcyBufferedImageUtil.addChannel(image1);
					image1.beginUpdate();
					dataArray = image.getDataCopyXY(0);
					doubleDataArray = Array1DUtil.arrayToDoubleArray(dataArray, image.isSignedDataType());
					Array1DUtil.doubleArrayToSafeArray(doubleDataArray, image1.getDataXY(zoom_degree), image1.isSignedDataType());
					image1.endUpdate();
					}
				else if ((!(zoom_degree==0))&&(channel_state==2)){
					image2 = IcyBufferedImageUtil.addChannel(image2);
					image2.beginUpdate();
					dataArray = image.getDataCopyXY(0);
					doubleDataArray = Array1DUtil.arrayToDoubleArray(dataArray, image.isSignedDataType());
					Array1DUtil.doubleArrayToSafeArray(doubleDataArray, image2.getDataXY(zoom_degree), image2.isSignedDataType());
					image2.endUpdate();
					}
				else if ((!(zoom_degree==0))&&(channel_state==3)){
					image3 = IcyBufferedImageUtil.addChannel(image3);
					image3.beginUpdate();
					dataArray = image.getDataCopyXY(0);
					doubleDataArray = Array1DUtil.arrayToDoubleArray(dataArray, image.isSignedDataType());
					Array1DUtil.doubleArrayToSafeArray(doubleDataArray, image3.getDataXY(zoom_degree), image3.isSignedDataType());
					image3.endUpdate();
					}
				else if ((!(zoom_degree==0))&&(channel_state==4)){
					image4 = IcyBufferedImageUtil.addChannel(image4);
					image4.beginUpdate();
					dataArray = image.getDataCopyXY(0);
					doubleDataArray = Array1DUtil.arrayToDoubleArray(dataArray, image.isSignedDataType());
					Array1DUtil.doubleArrayToSafeArray(doubleDataArray, image4.getDataXY(zoom_degree), image4.isSignedDataType());
					image4.endUpdate();
					}
				else if ((!(zoom_degree==0))&&(channel_state==5)){
					image5 = IcyBufferedImageUtil.addChannel(image5);
					image5.beginUpdate();
					dataArray = image.getDataCopyXY(0);
					doubleDataArray = Array1DUtil.arrayToDoubleArray(dataArray, image.isSignedDataType());
					Array1DUtil.doubleArrayToSafeArray(doubleDataArray, image5.getDataXY(zoom_degree), image5.isSignedDataType());
					image5.endUpdate();
					}
			
			// If the channel_state is not in the greatest valued position (5), increment it.
			if (channel_state < 5) {
				//This if branch alleviates the issue of the channel_state becoming a variable of type string and returning "01" instead of integer 1.
				//This was an issue in the past. Possibly because line 30 set the channel state with "0" instead of 0. A string versus an integer.
				if ((channel_state < 0)||(channel_state > 5)){
					channel_state = 1;}
				channel_state = channel_state + 1; // Do NOT replace with "channel_state += 1". Causes errors, likely due to variable type casting
					MicroManager.getCore().setProperty("ZeissReflectorTurret", "State", channel_state);
					TimeUnit.MILLISECONDS.sleep(delay_interval);
				}
			// If the channel_state is NOT less than 5, e.g. it is 5, set it to 0.
			else {
				channel_state = 0;
					MicroManager.getCore().setProperty("ZeissReflectorTurret", "State", channel_state);
					TimeUnit.MILLISECONDS.sleep(delay_interval);
				}
				StageMover.moveZAbsolute(current_z);
				
			} while (channel_state != 0);
				double current_z = 0.0;
				current_z = StageMover.getZ();
				StageMover.moveZAbsolute(current_z + z_increment);
			}
		////////////////////End Z-stack Acquisition Loops/////////////////////////////////////////////

		// Store the image# files (multiple channels used to hold z-slices) in the sequence. 
		sequence0.setImage(0, 0, image0);
		sequence0.setImage(0, 1, image1);
		sequence0.setImage(0, 2, image2);
		sequence0.setImage(0, 3, image3);
		sequence0.setImage(0, 4, image4);
		sequence0.setImage(0, 5, image5);

		double x_position = 0.0;
		x_position = StageMover.getX();
		double y_position = 0.0;
		y_position = StageMover.getY();

		// Write out the sequence containing the z-stacks in the user specified directory.
		//Check the correction of adding "File " before "file = new..."
		File file = new File(filePath + "x"+ x_position + "y" + y_position+".tiff");
		Saver.save(sequence0, file);
		}
